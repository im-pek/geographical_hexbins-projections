{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import geopandas as gpd\n",
    "\n",
    "import quickplot as qp"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Hexbins and map projection\n",
    "This assignment takes a look at the implications of map projection for a popular visualization technique *hexbinning* when applied to geographical data over large geographical extents.\n",
    "\n",
    "The exercise is inspired by this recent, fun paper, which deserves an award for its great title, if nothing else:\n",
    "\n",
    "Battersby, S. E., D. “daan” Strebe, and M. P. Finn. 2016. [Shapes on a plane: evaluating the impact of projection distortion on spatial binning](http://www.tandfonline.com/doi/full/10.1080/15230406.2016.1180263). Cartography and Geographic Information Science :1–12."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Serious business: earthquakes and UFOs\n",
    "Before getting started, let's load the datasets we will work with.  Don't worry, this isn't going to be about showing how earthquakes cause UFOs, although... you might end up wondering if UFOs cause voting Democratic.\n",
    "\n",
    "### First up, earthquakes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fa356b00400>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "quakes = gpd.read_file('earthquakes.geojson')\n",
    "qp.quickplot(quakes, markersize=0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These data were obtained from [National Centers for Environmental Information at NOAA](https://www.ngdc.noaa.gov/nndc/struts/form?t=101650&s=1&d=1), and include all earthquakes of intensity 6.8 or greater since 1900.  I cleaned up the raw data a little to remove columns we aren't much interested in, and also passed them through [QGIS](http://www.qgis.org/en/site/) to produce the GeoJSON format file from the raw CSV provided.\n",
    "\n",
    "We will look at only quakes in roughly speaking, Central and South America."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>I_D</th>\n",
       "      <th>FLAG_TSUNAMI</th>\n",
       "      <th>YEAR</th>\n",
       "      <th>MONTH</th>\n",
       "      <th>DAY</th>\n",
       "      <th>FOCAL_DEPTH</th>\n",
       "      <th>EQ_PRIMARY</th>\n",
       "      <th>LATITUDE</th>\n",
       "      <th>LONGITUDE</th>\n",
       "      <th>DEATHS</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2566</td>\n",
       "      <td></td>\n",
       "      <td>1900</td>\n",
       "      <td>1</td>\n",
       "      <td>11</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.8</td>\n",
       "      <td>36.5</td>\n",
       "      <td>133.5</td>\n",
       "      <td>0</td>\n",
       "      <td>POINT (133.5 36.5)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2569</td>\n",
       "      <td></td>\n",
       "      <td>1900</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>10.0</td>\n",
       "      <td>7.4</td>\n",
       "      <td>20.0</td>\n",
       "      <td>-105.0</td>\n",
       "      <td>0</td>\n",
       "      <td>POINT (-105 20)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2571</td>\n",
       "      <td></td>\n",
       "      <td>1900</td>\n",
       "      <td>5</td>\n",
       "      <td>16</td>\n",
       "      <td>60.0</td>\n",
       "      <td>7.8</td>\n",
       "      <td>20.0</td>\n",
       "      <td>-105.0</td>\n",
       "      <td>0</td>\n",
       "      <td>POINT (-105 20)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2573</td>\n",
       "      <td></td>\n",
       "      <td>1900</td>\n",
       "      <td>6</td>\n",
       "      <td>21</td>\n",
       "      <td>60.0</td>\n",
       "      <td>7.5</td>\n",
       "      <td>10.0</td>\n",
       "      <td>-85.5</td>\n",
       "      <td>0</td>\n",
       "      <td>POINT (-85.5 10)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2575</td>\n",
       "      <td></td>\n",
       "      <td>1900</td>\n",
       "      <td>7</td>\n",
       "      <td>29</td>\n",
       "      <td>33.0</td>\n",
       "      <td>7.6</td>\n",
       "      <td>-10.0</td>\n",
       "      <td>165.0</td>\n",
       "      <td>0</td>\n",
       "      <td>POINT (165 -10)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    I_D FLAG_TSUNAMI  YEAR  MONTH  DAY  FOCAL_DEPTH  EQ_PRIMARY  LATITUDE  \\\n",
       "0  2566               1900      1   11          0.0         7.8      36.5   \n",
       "1  2569               1900      1   20         10.0         7.4      20.0   \n",
       "2  2571               1900      5   16         60.0         7.8      20.0   \n",
       "3  2573               1900      6   21         60.0         7.5      10.0   \n",
       "4  2575               1900      7   29         33.0         7.6     -10.0   \n",
       "\n",
       "   LONGITUDE  DEATHS            geometry  \n",
       "0      133.5       0  POINT (133.5 36.5)  \n",
       "1     -105.0       0     POINT (-105 20)  \n",
       "2     -105.0       0     POINT (-105 20)  \n",
       "3      -85.5       0    POINT (-85.5 10)  \n",
       "4      165.0       0     POINT (165 -10)  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "quakes.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "q_CSAM = quakes[(quakes.LONGITUDE > -100) & (quakes.LONGITUDE < -50) & \n",
    "                (quakes.LATITUDE < 15) & (quakes.LATITUDE > -65)]\n",
    "qp.quickplot(q_CSAM, markersize=0.75)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next up, and even more serious... \n",
    "\n",
    "### UFO sitings in the contiguous US in 2014:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>count</th>\n",
       "      <th>date</th>\n",
       "      <th>n</th>\n",
       "      <th>shape</th>\n",
       "      <th>state</th>\n",
       "      <th>year</th>\n",
       "      <th>reports</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Clinton, WA</td>\n",
       "      <td>1</td>\n",
       "      <td>July 4, 2014</td>\n",
       "      <td>85544</td>\n",
       "      <td>Circle</td>\n",
       "      <td>WA</td>\n",
       "      <td>2014</td>\n",
       "      <td>22</td>\n",
       "      <td>POINT (-122.352274 47.962381)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Downingtown, PA</td>\n",
       "      <td>1</td>\n",
       "      <td>July 4, 2014</td>\n",
       "      <td>68587</td>\n",
       "      <td>Sphere</td>\n",
       "      <td>PA</td>\n",
       "      <td>2014</td>\n",
       "      <td>21</td>\n",
       "      <td>POINT (-75.702163 40.008289)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Lake Elsinore, CA</td>\n",
       "      <td>1</td>\n",
       "      <td>January 1, 2014</td>\n",
       "      <td>9717</td>\n",
       "      <td>Fireball</td>\n",
       "      <td>CA</td>\n",
       "      <td>2014</td>\n",
       "      <td>20</td>\n",
       "      <td>POINT (-117.335404 33.685956)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Oak Island, NC</td>\n",
       "      <td>1</td>\n",
       "      <td>June 23, 2014</td>\n",
       "      <td>50679</td>\n",
       "      <td>Circle</td>\n",
       "      <td>NC</td>\n",
       "      <td>2014</td>\n",
       "      <td>19</td>\n",
       "      <td>POINT (-78.119787 33.91329)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Myrtle Beach, SC</td>\n",
       "      <td>1</td>\n",
       "      <td>June 25, 2014</td>\n",
       "      <td>73483</td>\n",
       "      <td>Fireball</td>\n",
       "      <td>SC</td>\n",
       "      <td>2014</td>\n",
       "      <td>19</td>\n",
       "      <td>POINT (-78.886021 33.710391)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                city  count              date      n      shape state  year  \\\n",
       "0        Clinton, WA      1      July 4, 2014  85544     Circle    WA  2014   \n",
       "1    Downingtown, PA      1      July 4, 2014  68587     Sphere    PA  2014   \n",
       "2  Lake Elsinore, CA      1   January 1, 2014   9717   Fireball    CA  2014   \n",
       "3     Oak Island, NC      1     June 23, 2014  50679     Circle    NC  2014   \n",
       "4   Myrtle Beach, SC      1     June 25, 2014  73483   Fireball    SC  2014   \n",
       "\n",
       "   reports                       geometry  \n",
       "0       22  POINT (-122.352274 47.962381)  \n",
       "1       21   POINT (-75.702163 40.008289)  \n",
       "2       20  POINT (-117.335404 33.685956)  \n",
       "3       19    POINT (-78.119787 33.91329)  \n",
       "4       19   POINT (-78.886021 33.710391)  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ufo_2014 = gpd.read_file('ufos-2014.geojson')\n",
    "ufo_2014.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These data are collated by the [National UFO Reporting Center](http://nuforc.org/) although the set I downloaded were from this fine web map at [Metrocosm](http://metrocosm.com/ufo-sightings-map.html), and only ran up to mid-2015.  It's a large dataset, so I have restricted it to only sitings in 2014, the last year for which complete data were available in the web map."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fa356ac82e8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## because UFOs should always be colored green :-)\n",
    "fig = plt.figure(figsize=(10,5))\n",
    "ax = plt.subplot()\n",
    "ax.set_aspect('equal')\n",
    "ax.set_facecolor('#000000')\n",
    "qp.quickplot(ufo_2014, color='#66ff66', markersize=1, alpha=0.75)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we'll want to put these in context, so let's grab that simple world map built into `geopandas` again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fa356a312e8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n",
    "qp.quickplot(world)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Making hexbin maps\n",
    "The best way to appreciate what hexbins are is to try them. `pyplot` has a built in hexbin function. Give it a try by running the cell below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fa3510d5908>]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fa3510c2828>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import random\n",
    "# make 500 random x,y coordinates\n",
    "x = [random.random() for __ in range(1000)]\n",
    "y = [random.random() for __ in range(1000)]\n",
    "# plot hexbins\n",
    "plt.hexbin(x, y, gridsize=15, cmap='inferno')\n",
    "# put the points on top for reference\n",
    "plt.plot(x, y, 'k.', markersize=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The idea is that the colored in plot makes it easier to identify 'hotspots' or concentrations in the data.  It is particularly useful with large number of points (try changing the number of points in the cell above).\n",
    "\n",
    "Now, this is fine as far as it goes, but is not ideal if our $(x,y)$ coordinates are actually geographical coordinates, because [reminder] *the Earth is not flat*. The built in hexbin plot doesn't treat the two coordinates as equal (we could use `ax.set_aspect('equal')` to partly fix this [try it, if you like].  But a more insidious difficulty is that geographic coordinates affect the *area* of the hexagons, so that the supposedly unbiased picture of the variations in density of points across the 'map' are not unbiased at all."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### A geographic hexbin map\n",
    "So... I've written a small 'wrapper' function for the hexbin function (below) which we can use instead.\n",
    "\n",
    "Take a look in the cell below, before running it.  You don't need to understand everything that is happening here, because you are just going to use this function.  But you may find it instructive to look at how a GeoDataFrame is assembled.  In particular, note how we set its CRS from the input point layer CRS.  Also notice how we make an additional 'all hexes' GeoDataFrame using the unary_union.envelope operation.  This is used later to allow us to make a basemap behind hexbin outputs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import shapely.geometry\n",
    "import math\n",
    "\n",
    "# makes a hexbin GeoDataFrame and also an 'all hexbins' GeoDataFrame\n",
    "# from supplied pt layer with the specified nx number of hexes across\n",
    "# the tricky part here is extracting hexagons from the PathCollection\n",
    "# returned by pyplot.hexbin()\n",
    "def get_hexbin_map(pt_layer, nx=50):\n",
    "    # make x, y coordinate pairs from the geometries\n",
    "    xy = [(p.x, p.y) for p in pt_layer.geometry]\n",
    "    x = [__[0] for __ in xy]\n",
    "    y = [__[1] for __ in xy]\n",
    "    \n",
    "    # determine x and y ranges\n",
    "    xmin, xmax = min(x), max(x)\n",
    "    ymin, ymax = min(y), max(y)\n",
    "    x_range = (max(x) - min(x)) * (1 + 1/nx)\n",
    "    y_range = (max(y) - min(y)) * (1 + 1/nx)\n",
    "    xmin, xmax = xmin - x_range / (nx*2), xmax + x_range / (nx*2)\n",
    "    ymin, ymax = ymin - y_range / (nx*2), ymax + y_range / (nx*2)\n",
    "    \n",
    "    # setup the number of hexes in x and y directions\n",
    "    grid_dimensions = (nx, int(nx * y_range / x_range / math.sqrt(3)))\n",
    "    # and the extent\n",
    "    xt = (xmin, xmax, ymin, ymax)\n",
    "    \n",
    "    # use pyplot.hexbin to perform the analysis\n",
    "    # retaining the output, details of which are available at\n",
    "    # http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.hexbin\n",
    "    hb = plt.hexbin(x, y, extent=xt, gridsize=grid_dimensions)\n",
    "    \n",
    "    # retrieve the base hexagon as a shapely Polygon from the hexbin results\n",
    "    base_hex = shapely.geometry.polygon.Polygon([xy[0] for xy in hb.get_paths()[0].iter_segments()])\n",
    "    # make the array of hexbins by iterating over the 'offsets'\n",
    "    hex_shapes = [shapely.affinity.translate(base_hex, xoff=dx, yoff=dy) for (dx, dy) in hb.get_offsets()]\n",
    "    # now make a geopandas GeoDataFrame with these as its geometry column\n",
    "    hexes = gpd.GeoDataFrame(geometry=gpd.GeoSeries(hex_shapes))\n",
    "    # also add the counts from the hexbin results\n",
    "    hexes['n'] = list(hb.get_array())\n",
    "    # set the CRS\n",
    "    hexes.crs = pt_layer.crs\n",
    "    \n",
    "    # make an all hexes GeoDataFrame also\n",
    "    hexes_all = gpd.GeoDataFrame(geometry=gpd.GeoSeries(hexes.geometry.unary_union.envelope))\n",
    "    hexes_all.crs = hexes.crs\n",
    "    \n",
    "    # return both\n",
    "    return hexes, hexes_all"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using `get_hexbin_map()`\n",
    "So now let's use this function.\n",
    "\n",
    "Here, you need to pay attention, because you will be asked to do something similar yourself (in fact twice).\n",
    "\n",
    "First, run the function to make hexbins, retaining both the hexbins and the 'all hexbins' as `extent`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'q_CSAM' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-4-78602988380b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mhexbins\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mextent\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_hexbin_map\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mq_CSAM\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'q_CSAM' is not defined"
     ]
    }
   ],
   "source": [
    "hexbins, extent = get_hexbin_map(q_CSAM, nx=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Don't worry for now about the goofy shape of the output.\n",
    "\n",
    "Next we use `geopandas` overlay operation to make a basemap we can use for our final result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'world' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-2-ab8146fdb4d3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mbasemap\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moverlay\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mworld\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mworld\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontinent\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'North America'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'South America'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mextent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'intersection'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mqp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mquickplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbasemap\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'world' is not defined"
     ]
    }
   ],
   "source": [
    "basemap = gpd.overlay(world[world.continent.isin(['North America', 'South America'])], extent, how='intersection')\n",
    "qp.quickplot(basemap)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we can put everything together.  \n",
    "\n",
    "Make a figure (so we can specify the size). Add a subplot, give it a title (referencing the projection), and then plot the basemap, and the hexbin results together."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = plt.figure(figsize=(3,7.5))\n",
    "ax = plt.subplot(111)\n",
    "ax.set_title('WGS84')\n",
    "qp.quickplot(basemap, facecolor='w', alpha=1.0, edgecolor='k', linewidth=0.0)\n",
    "qp.quickplot(hexbins, column='n', cmap='plasma', alpha=0.75)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Make sure you understand all of the above. In the two cells below, it is all run at once, first for the earthquakes, then for the UFOs. The earthquakes result looks different because when we run it all in one cell like this `quickplot()` still has access to the `basemap`. [Honestly I am a little unclear why this happens. Don't worry about it too much&mdash;it all works when we put it in a single cell.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'plt' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-5-585deaeed702>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m7.5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mhexbins\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mextent\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_hexbin_map\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mq_CSAM\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mbasemap\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moverlay\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mworld\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mworld\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontinent\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'North America'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'South America'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mextent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'intersection'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'plt' is not defined"
     ]
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(3,7.5))\n",
    "\n",
    "hexbins, extent = get_hexbin_map(q_CSAM, nx=10)\n",
    "basemap = gpd.overlay(world[world.continent.isin(['North America', 'South America'])], extent, how='intersection')\n",
    "\n",
    "ax = plt.subplot(111)\n",
    "ax.set_title('WGS84')\n",
    "qp.quickplot(basemap, facecolor='w', alpha=1.0, edgecolor='k', linewidth=0.0)\n",
    "qp.quickplot(hexbins, column='n', cmap='plasma', alpha=0.75)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'plt' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-6-a4c0a8110170>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mhexbins\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mextent\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_hexbin_map\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mufo_2014\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m30\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mbasemap\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moverlay\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mworld\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mworld\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontinent\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;34m'North America'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mextent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'intersection'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'plt' is not defined"
     ]
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(8,4))\n",
    "\n",
    "hexbins, extent = get_hexbin_map(ufo_2014, nx=30)\n",
    "basemap = gpd.overlay(world[world.continent=='North America'], extent, how='intersection')\n",
    "\n",
    "ax = plt.subplot(111)\n",
    "ax.set_title('WGS84')\n",
    "qp.quickplot(basemap, facecolor='w', alpha=1.0, edgecolor='k', linewidth=0.0)\n",
    "qp.quickplot(hexbins, column='n', cmap='plasma', alpha=0.75)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assignment instructions\n",
    "So... here's what you are required to do.\n",
    "\n",
    "For each of these two cases (the earthquakes and the UFOs) make new hexbin maps, using appropriate **equal area projections** (recall that you can use [this website](http://projectionwizard.org/) to discover the PROJ4 code for suitable projections). To do this, you'll want to use the `to_crs()` function on each dataset. You will also need to apply the same projection to the world data in each case to get the basemap right.\n",
    "\n",
    "When you have successfully made these maps, compare them to the maps made above. Have the apparent hotspots moved? Have they shifted position in both cases? To what do you attribute the movement (if any)?\n",
    "\n",
    "You should complete the code cells below, appropriately, and also the cell that follows with answers to these questions.\n",
    "\n",
    "When you are done, download and submit the completed notebook .ipynb file to bCourses in the dropbox provided, renaming it to something like **your_name_your_SSID.ipynb**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'plt' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-9-92f240f9dba5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m## Earthquakes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m## Hexbins as above\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m7.5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# you might want to change the size\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m121\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_title\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'WGS84'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'plt' is not defined"
     ]
    }
   ],
   "source": [
    "#homework\n",
    "## Earthquakes\n",
    "## Hexbins as above\n",
    "fig = plt.figure(figsize=(6,7.5))  # you might want to change the size\n",
    "ax = plt.subplot(121)\n",
    "ax.set_title('WGS84')\n",
    "\n",
    "hexbins, extent = get_hexbin_map(q_CSAM, nx=10)\n",
    "\n",
    "# don't forget to reproject the world data also, as appropriate\n",
    "basemap = gpd.overlay(world[world.continent.isin(['North America', 'South America'])], extent, how='intersection')\n",
    "\n",
    "qp.quickplot(basemap, facecolor='w', alpha=1.0, edgecolor='k', linewidth=0.0)\n",
    "qp.quickplot(hexbins, column='n', cmap='plasma', alpha=0.75)\n",
    "\n",
    "## Equal-area hexbins in panel 2\n",
    "ax = plt.subplot(122)\n",
    "ax.set_title('World Mollweidee Projection')\n",
    "\n",
    "\n",
    "## YOUR CODE TO MAKE AN EQUAL-AREA PROJECTION HEXBIN MAP SHOULD GO HERE\n",
    "fig = plt.figure(figsize=(7,9))\n",
    "\n",
    "hexbins, extent = get_hexbin_map(q_CSAM, nx=12)\n",
    "\n",
    "hexbins_new_projection = hexbins.to_crs({'init': 'epsg:5400'})\n",
    "basemap_new_projection = basemap.to_crs({'init': 'epsg:5400'})\n",
    "\n",
    "qp.quickplot(basemap_new_projection, facecolor='lightgray', alpha=0.9, edgecolor='black', linewidth=0.1)\n",
    "qp.quickplot(hexbins_new_projection, column='n', cmap='plasma', alpha=0.9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'plt' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-90ae3ed5c847>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m## UFOss\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m## Hexbins as above\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m16\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# you might want to change the size\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m121\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_title\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'WGS84'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'plt' is not defined"
     ]
    }
   ],
   "source": [
    "## UFOss\n",
    "## Hexbins as above\n",
    "fig = plt.figure(figsize=(16,6))  # you might want to change the size\n",
    "ax = plt.subplot(121)\n",
    "ax.set_title('WGS84')\n",
    "\n",
    "hexbins, extent = get_hexbin_map(ufo_2014, nx=30)\n",
    "# don't forget to reproject the world data also, as appropriate\n",
    "basemap = gpd.overlay(world[world.continent=='North America'], extent, how='intersection')\n",
    "\n",
    "qp.quickplot(basemap, facecolor='w', alpha=1.0, edgecolor='k', linewidth=0.0)\n",
    "qp.quickplot(hexbins, column='n', cmap='plasma', alpha=0.75)\n",
    "\n",
    "## Equal-area hexbins in panel 2\n",
    "\n",
    "ax = plt.subplot(122)\n",
    "ax.set_title('Sphere Mollweidee Projection')\n",
    "\n",
    "## YOUR CODE TO MAKE AN EQUAL-AREA PROJECTION HEXBIN MAP SHOULD GO HERE\n",
    "\n",
    "fig = plt.figure(figsize=(19,8))\n",
    "\n",
    "hexbins, extent = get_hexbin_map(ufo_2014, nx=33)\n",
    "\n",
    "hexbins_new_projection = hexbins.to_crs(epsg=53009)\n",
    "basemap_new_projection = basemap.to_crs(epsg=53009)\n",
    "\n",
    "qp.quickplot(basemap_new_projection, facecolor='gray', alpha=0.9, edgecolor='black', linewidth=0.2)\n",
    "qp.quickplot(hexbins_new_projection, column='n', cmap='plasma', alpha=0.7)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Answer the following questions in this cell\n",
    "(double-click and write responses below each question)\n",
    "### Have the hotspots apparent in each map shifted location?\n",
    "Yes.\n",
    "### Have the hotspots been affected differently in each case?\n",
    "Yes.\n",
    "### To what do you attribute the movement?\n",
    "In the original map, area accuracy has been compromised for the making of it, to preserve the correct land mass shapes on the map. This is inevitable, as it is impossible to portray the reality of a spherical world on a flat map. What our code does, is to reinstate the area accuracy, by creating equal area projections, for both hexbins and the world map.\n",
    "\n",
    "The world map is thus changed to better reflect the areas of land masses. Even the hexbins were re-projected, as they should be taking into account the curvature of the earth as well, when mapped out.\n",
    "\n",
    "Since hotspots are specific points on maps, when the land masses' areas (and shapes) change, the original specific points on maps will change in position as well, which means the hotspots apparent in each map change locations too. These changes occur precisely because of the problems in original maps, and the way we try to solve it, as I have explained above.\n",
    "\n",
    "The hotspots have been affected differently, as each hotspot is on a different latitude and longitude, which means that they are subjected to different degrees of curvature on Earth and different map interpretations on the original map. Thus, when reprojected, they are all subjected to different distances and directions of repositionings, all being affected differently in each case."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
